#!/usr/bin/perl
use v5.14;
use warnings;
use Glib qw( TRUE FALSE );
use EV::Glib;
#use Glib::EV;
use AnyEvent;
use GStreamer;
use Digest::Adler32::XS;
use Getopt::Long ();

use constant {
    VIDEO_MAGIC_NUMBER => 0xFB42,
    VIDEO_VERSION      => 0x0000,
    VIDEO_ENCODING     => 0x0001,
};
use constant LISTEN_PORT => 49001;

#my $INPUT_DEV        = '/dev/video0';
my $WIDTH            = 1280;
my $HEIGHT           = 720;
my $CODEC            = 'H264';
my $V4L_CONF_PROGRAM = 'v4l2-ctl';
Getopt::Long::GetOptions(
    #'input=s'  => \$INPUT_DEV,
    'w|width=i'  => \$WIDTH,
    'h|height=i' => \$HEIGHT,
);


sub bus_callback
{
    my ($bus, $msg, $loop) = @_;

    if( $msg->type & "error" ) {
        warn $msg->error;
        #$loop->quit;
        EV::unloop();
    }
    elsif( $msg->type & "eos" ) {
        warn "End of stream, quitting\n";
        #$loop->quit;
        EV::unloop();
    }

    return TRUE;
}

sub dump_file_callback
{
    my ($fakesink, $buf, $pad, $user_data) = @_;
    my $frame_data = $buf->data;
    my $frame_size = $buf->size;
    state $called = 0;

    my $digest = Digest::Adler32::XS->new;
    $digest->add( $frame_data );
    my $checksum = $digest->hexdigest;

    warn "Frame $called, Buffer size: $frame_size, Checksum: $checksum\n";
    output_video_frame( $frame_data, $frame_size, $WIDTH, $HEIGHT );

    $called++;
    return 1;
}
sub output_video_frame
{
    my ($frame_data, $frame_size, $width, $height) = @_;

    my $digest = Digest::Adler32::XS->new;
    $digest->add( $frame_data );
    my $checksum = $digest->digest;

    my $out_headers = pack 'nnnNNnnC*'
        ,VIDEO_MAGIC_NUMBER
        ,VIDEO_VERSION
        ,VIDEO_ENCODING
        ,0x00000000 # 32-bits flags
        ,$frame_size
        ,$width
        ,$height
        ,unpack( 'C*', $checksum )
        ,( (0x00) x 10 ) # 10 bytes reserved
        ;

    print $out_headers;
    print $frame_data;
    return 1;
}

sub configure_video
{
    my ($prog, $dev, $width, $height, $codec) = @_;
    return 1 if $dev !~ m!\A /dev!x;

    my $exec_str = $prog . ' --set-fmt-video='
        . 'width=' . $width
        . ',height=' . $height
        . ',pixelformat="' . $codec . '"'
        . ' -d ' . $dev;
    warn "Running v4l conf: $exec_str\n";
    (system( $exec_str ) == 0) or die "Couldn't execute $prog: $!\n";
    return 1;
}


{
    my $cv = AnyEvent->condvar;

    #configure_video( $V4L_CONF_PROGRAM, $INPUT_DEV, $WIDTH, $HEIGHT, $CODEC );
    GStreamer->init();
    my $loop = Glib::MainLoop->new( undef, FALSE );

    my $pipeline = GStreamer::Pipeline->new( 'pipeline' );
    my ($src, $h264, $capsfilter, $fakesink)
        = GStreamer::ElementFactory->make(
            #v4l2src    => 'and_who_are_you',
            #filesrc    => 'and_who_are_you',
            fdsrc      => 'and_who_are_you',
            h264parse  => 'the_proud_lord_said',
            capsfilter => 'that_i_should_bow_so_low',
            fakesink   => 'only_a_cat_of_a_different_coat',
        );

    my $caps = GStreamer::Caps::Simple->new( 'video/x-h264',
        alignment       => 'Glib::String' => 'au',
        'stream-format' => 'Glib::String' => 'byte-stream',
    );
    $capsfilter->set( caps => $caps );

    $src->set(
        #location => $INPUT_DEV,
        #device => $INPUT_DEV,
    );

    $fakesink->set(
        'signal-handoffs' => TRUE,
    );
    $fakesink->signal_connect(
        'handoff' => \&dump_file_callback,
    );

    $pipeline->add( $src, $h264, $capsfilter, $fakesink );
    $src->link( $h264, $capsfilter, $fakesink );

    $pipeline->get_bus->add_watch( \&bus_callback, $loop );

    $pipeline->set_state( 'playing' );
    #$loop->run;
    $cv->recv;

    # Cleanup
    $pipeline->set_state( 'null' );
}
